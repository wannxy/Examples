#include "kv32.h"

/* 文件头 */
// elf.h 123
struct V Elf32_Ehdr_Magic_Class[4] = {
	{ELFCLASSNONE,"Invalid class", "无效类型"},
	{ELFCLASS32,  "32-bit objects","32位对象"},
	{ELFCLASS64,  "64-bit objects","64位对象"},
	{ELFCLASSNUM, "",              "无效类型"}
};
// elf.h 129
struct V Elf32_Ehdr_Magic_Data[4] = {
	{ELFDATANONE,  "Invalid data encoding",         "无效的数据编码"},
	{ELFDATA2LSB,  "2's complement, little endian", "小端"},
	{ELFDATA2MSB,  "2's complement, big endian",    "大端"},
	{ELFDATANUM,   "",                              ""}
};
// elf.h 138
struct V Elf32_Ehdr_Magic_OSABI[16] = {
	{ELFOSABI_NONE,       "UNIX System V ABI or [Alias]",""},
	{ELFOSABI_SYSV,       "UNIX System V ABI or [Alias]",""}, // 与ELFOSABI_NONE相同
	{ELFOSABI_HPUX,       "HP-UX",""},
	{ELFOSABI_NETBSD,     "NetBSD",""},
	{ELFOSABI_GNU,        "Object uses GNU ELF extensions",""},
	{ELFOSABI_LINUX,      "Compatibility alias",""},
	{ELFOSABI_SOLARIS,    "Sun Solaris",""},
	{ELFOSABI_AIX,        "IBM AIX",""},
	{ELFOSABI_IRIX,       "SGI Irix",""},
	{ELFOSABI_FREEBSD,    "FreeBSD",""},
	{ELFOSABI_TRU64,      "Compaq TRU64 UNIX",""},
	{ELFOSABI_MODESTO,    "Novell Modesto",""},
	{ELFOSABI_OPENBSD,    "OpenBSD",""},
	{ELFOSABI_ARM_AEABI,  "ARM EABI",""},
	{ELFOSABI_ARM,        "ARM",""},
	{ELFOSABI_STANDALONE, "Standalone (embedded) application",""},
};
// elf.h 162
struct V Elf32_Ehdr_e_type[10] = {
	{ET_NONE,  "No file type",                   "无文件类型"},
	{ET_REL,   "Relocatable file",               "可重定位文件"},
	{ET_NONE,  "Executable file",                "可执行文件"},
	{ET_DYN,   "Shared object file",             "可共享文件"},
	{ET_CORE,  "Core file",                      "核心文件"},
	{ET_NUM,   "Number of defined types",        "已定义类型数量"},
	{ET_LOOS,  "OS-specific range start",        "系统指定范围开始"},
	{ET_HIOS,  "OS-specific range end",          "系统指定范围结束"},
	{ET_LOPROC,"Processor-specific range start", "处理器指定范围开始"},
	{ET_HIPROC,"Processor-specific range end",   "处理器指定范围结束"},
};
// elf.h 175
struct V Elf32_Ehdr_e_machine[179] = {
	{EM_NONE,         "No machine",""},
	{EM_M32,          "AT&T WE 32100",""},
	{EM_SPARC,        "SUN SPARC",""},
	{EM_386,          "Intel 80386",""},
	{EM_68K,          "Motorola m68k family",""},
	{EM_88K,          "Motorola m88k family",""},
	{EM_IAMCU,        "Intel MCU",""},
	{EM_860,          "Intel 80860",""},
	{EM_MIPS,         "MIPS R3000 big-endian",""},
	{EM_S370,         "IBM System/370",""},
	{EM_MIPS_RS3_LE,  "MIPS R3000 little-endian",""},
	{EM_PARISC,       "HPPA",""},
	{EM_VPP500,       "Fujitsu VPP500",""},
	{EM_SPARC32PLUS,  "Sun's \"v8plus\"",""},
	{EM_960,          "Intel 80960",""},
	{EM_PPC,          "PowerPC",""},
	{EM_PPC64,        "PowerPC 64-bit",""},
	{EM_S390,         "IBM S390",""},
	{EM_SPU,          "IBM SPU/SPC",""},
	{EM_V800,         "NEC V800 series",""},
	{EM_FR20,         "Fujitsu FR20",""},
	{EM_RH32,         "TRW RH-32",""},
	{EM_RCE,          "Motorola RCE",""},
	{EM_ARM,          "ARM",""},
	{EM_FAKE_ALPHA,   "Digital Alpha",""},
	{EM_SH,           "Hitachi SH",""},
	{EM_SPARCV9,      "SPARC v9 64-bit",""},
	{EM_TRICORE,      "Siemens Tricore",""},
	{EM_ARC,          "Argonaut RISC Core",""},
	{EM_H8_300,       "Hitachi H8/300",""},
	{EM_H8_300H,      "Hitachi H8/300H",""},
	{EM_H8S,          "Hitachi H8S",""},
	{EM_H8_500,       "Hitachi H8/500",""},
	{EM_IA_64,        "Intel Merced",""},
	{EM_MIPS_X,       "Stanford MIPS-X",""},
	{EM_COLDFIRE,     "Motorola Coldfire",""},
	{EM_68HC12,       "Motorola M68HC12",""},
	{EM_MMA,          "Fujitsu MMA Multimedia Accelerator",""},
	{EM_PCP,          "Siemens PCP",""},
	{EM_NCPU,         "Sony nCPU embeeded RISC",""},
	{EM_NDR1,         "Denso NDR1 microprocessor",""},
	{EM_STARCORE,     "Motorola Start*Core processor",""},
	{EM_ME16,         "Toyota ME16 processor",""},
	{EM_ST100,        "STMicroelectronic ST100 processor",""},
	{EM_TINYJ,        "Advanced Logic Corp. Tinyj emb.fam",""},
	{EM_X86_64,       "AMD x86-64 architecture",""},
	{EM_PDSP,         "Sony DSP Processor",""},
	{EM_PDP10,        "Digital PDP-10",""},
	{EM_PDP11,        "Digital PDP-11",""},
	{EM_FX66,         "Siemens FX66 microcontroller",""},
	{EM_ST9PLUS,      "STMicroelectronics ST9+ 8/16 mc",""},
	{EM_ST7,          "STmicroelectronics ST7 8 bit mc",""},
	{EM_68HC16,       "Motorola MC68HC16 microcontroller",""},
	{EM_68HC11,       "Motorola MC68HC11 microcontroller",""},
	{EM_68HC08,       "Motorola MC68HC08 microcontroller",""},
	{EM_68HC05,       "Motorola MC68HC05 microcontroller",""},
	{EM_SVX,          "Silicon Graphics SVx",""},
	{EM_ST19,         "STMicroelectronics ST19 8 bit mc",""},
	{EM_VAX,          "Digital VAX",""},
	{EM_CRIS,         "Axis Communications 32-bit emb.proc",""},
	{EM_JAVELIN,      "Infineon Technologies 32-bit emb.proc",""},
	{EM_FIREPATH,     "Element 14 64-bit DSP Processor",""},
	{EM_ZSP,          "LSI Logic 16-bit DSP Processor",""},
	{EM_MMIX,         "Donald Knuth's educational 64-bit proc",""},
	{EM_HUANY,        "Harvard University machine-independent object files",""},
	{EM_PRISM,        "SiTera Prism",""},
	{EM_AVR,          "Atmel AVR 8-bit microcontroller",""},
	{EM_FR30,         "Fujitsu FR30",""},
	{EM_D10V,         "Mitsubishi D10V",""},
	{EM_D30V,         "Mitsubishi D30V",""},
	{EM_V850,         "NEC v850",""},
	{EM_M32R,         "Mitsubishi M32R",""},
	{EM_MN10300,      "Matsushita MN10300",""},
	{EM_MN10200,      "Matsushita MN10200",""},
	{EM_PJ,           "picoJava",""},
	{EM_OPENRISC,     "OpenRISC 32-bit embedded processor",""},
	{EM_ARC_COMPACT,  "ARC International ARCompact",""},
	{EM_XTENSA,       "Tensilica Xtensa Architecture",""},
	{EM_VIDEOCORE,    "Alphamosaic VideoCore",""},
	{EM_TMM_GPP,      "Thompson Multimedia General Purpose Proc",""},
	{EM_NS32K,        "National Semi. 32000",""},
	{EM_TPC,          "Tenor Network TPC",""},
	{EM_SNP1K,        "Trebia SNP 1000",""},
	{EM_ST200,        "STMicroelectronics ST200",""},
	{EM_IP2K,         "Ubicom IP2xxx",""},
	{EM_MAX,          "MAX processor",""},
	{EM_CR,           "National Semi. CompactRISC",""},
	{EM_F2MC16,       "Fujitsu F2MC16",""},
	{EM_MSP430,       "Texas Instruments msp430",""},
	{EM_BLACKFIN,     "Analog Devices Blackfin DSP",""},
	{EM_SE_C33,       "Seiko Epson S1C33 family",""},
	{EM_SEP,          "Sharp embedded microprocessor",""},
	{EM_ARCA,         "Arca RISC",""},
	{EM_UNICORE,      "PKU-Unity & MPRC Peking Uni. mc series",""},
	{EM_EXCESS,       "eXcess configurable cpu",""},
	{EM_DXP,          "Icera Semi. Deep Execution Processor",""},
	{EM_ALTERA_NIOS2, "Altera Nios II",""},
	{EM_CRX,          "National Semi. CompactRISC CRX",""},
	{EM_XGATE,        "Motorola XGATE",""},
	{EM_C166,         "Infineon C16x/XC16x",""},
	{EM_M16C,         "Renesas M16C",""},
	{EM_DSPIC30F,     "Microchip Technology dsPIC30F",""},
	{EM_CE,           "Freescale Communication Engine RISC",""},
	{EM_M32C,         "Renesas M32C",""},
	{EM_TSK3000,      "Altium TSK3000",""},
	{EM_RS08,         "Freescale RS08",""},
	{EM_SHARC,        "Analog Devices SHARC family",""},
	{EM_ECOG2,        "Cyan Technology eCOG2",""},
	{EM_SCORE7,       "Sunplus S+core7 RISC",""},
	{EM_DSP24,        "New Japan Radio (NJR) 24-bit DSP",""},
	{EM_VIDEOCORE3,   "Broadcom VideoCore III",""},
	{EM_LATTICEMICO32,"RISC for Lattice FPGA",""},
	{EM_SE_C17,       "Seiko Epson C17",""},
	{EM_TI_C6000,     "Texas Instruments TMS320C6000 DSP",""},
	{EM_TI_C2000,     "Texas Instruments TMS320C2000 DSP",""},
	{EM_TI_C5500,     "Texas Instruments TMS320C55x DSP",""},
	{EM_TI_ARP32,     "Texas Instruments App. Specific RISC",""},
	{EM_TI_PRU,       "Texas Instruments Prog. Realtime Unit",""},
	{EM_MMDSP_PLUS,   "STMicroelectronics 64bit VLIW DSP",""},
	{EM_CYPRESS_M8C,  "Cypress M8C",""},
	{EM_R32C,         "Renesas R32C",""},
	{EM_TRIMEDIA,     "NXP Semi. TriMedia",""},
	{EM_QDSP6,        "QUALCOMM DSP6",""},
	{EM_8051,         "Intel 8051 and variants",""},
	{EM_STXP7X,       "STMicroelectronics STxP7x",""},
	{EM_NDS32 ,       "Andes Tech. compact code emb. RISC",""},
	{EM_ECOG1X,       "Cyan Technology eCOG1X",""},
	{EM_MAXQ30,       "Dallas Semi. MAXQ30 mc",""},
	{EM_XIMO16,       "New Japan Radio (NJR) 16-bit DSP",""},
	{EM_MANIK,        "M2000 Reconfigurable RISC",""},
	{EM_CRAYNV2,      "Cray NV2 vector architecture",""},
	{EM_RX,           "Renesas RX",""},
	{EM_METAG,        "Imagination Tech. META",""},
	{EM_MCST_ELBRUS,  "MCST Elbrus",""},
	{EM_ECOG16,       "Cyan Technology eCOG16",""},
	{EM_CR16,         "National Semi. CompactRISC CR16",""},
	{EM_ETPU,         "Freescale Extended Time Processing Unit",""},
	{EM_SLE9X,        "Infineon Tech. SLE9X",""},
	{EM_L10M,         "Intel L10M",""},
	{EM_K10M,         "Intel K10M",""},
	{EM_AARCH64,      "ARM AARCH64",""},
	{EM_AVR32,        "Amtel 32-bit microprocessor",""},
	{EM_STM8,         "STMicroelectronics STM8",""},
	{EM_TILE64,       "Tileta TILE64",""},
	{EM_TILEPRO,      "Tilera TILEPro",""},
	{EM_MICROBLAZE,   "Xilinx MicroBlaze",""},
	{EM_CUDA,         "NVIDIA CUDA",""},
	{EM_TILEGX,       "Tilera TILE-Gx",""},
	{EM_CLOUDSHIELD,  "CloudShield",""},
	{EM_COREA_1ST,    "KIPO-KAIST Core-A 1st gen.",""},
	{EM_COREA_2ND,    "KIPO-KAIST Core-A 2nd gen.",""},
	{EM_ARC_COMPACT2, "Synopsys ARCompact V2",""},
	{EM_OPEN8,        "Open8 RISC",""},
	{EM_RL78,         "Renesas RL78",""},
	{EM_VIDEOCORE5,   "Broadcom VideoCore V",""},
	{EM_78KOR,        "Renesas 78KOR",""},
	{EM_56800EX,      "Freescale 56800EX DSC",""},
	{EM_BA1,          "Beyond BA1",""},
	{EM_BA2,          "Beyond BA2",""},
	{EM_XCORE,        "XMOS xCORE",""},
	{EM_MCHP_PIC,     "Microchip 8-bit PIC(r)",""},
	{EM_KM32,         "KM211 KM32",""},
	{EM_KMX32,        "KM211 KMX32",""},
	{EM_EMX16,        "KM211 KMX16",""},
	{EM_EMX8,         "KM211 KMX8",""},
	{EM_KVARC,        "KM211 KVARC",""},
	{EM_CDP,          "Paneve CDP",""},
	{EM_COGE,         "Cognitive Smart Memory Processor",""},
	{EM_COOL,         "Bluechip CoolEngine",""},
	{EM_NORC,         "Nanoradio Optimized RISC",""},
	{EM_CSR_KALIMBA,  "CSR Kalimba",""},
	{EM_Z80,          "Zilog Z80",""},
	{EM_VISIUM,       "Controls and Data Services VISIUMcore",""},
	{EM_FT32,         "FTDI Chip FT32",""},
	{EM_MOXIE,        "Moxie processor",""},
	{EM_AMDGPU,       "AMD GPU",""},
	{EM_RISCV,        "RISC-V",""},
	{EM_BPF,          "Linux BPF -- in-kernel virtual machine",""},
	{EM_NUM,          "",""}
};
// elf.h 378
struct V Elf32_Ehdr_e_version[3] = {
	{EV_NONE,    "Invalid ELF version", "无效ELF版本"},
	{EV_CURRENT, "Current version",     "当前版本"},
	{EV_NUM,     "", ""}
};

/* 程序头表 */
// elf.h 710
struct V Elf32_Phdr_p_type[20] = {
	{PT_NULL,          "[PT_NULL] Program header table entry unused",   "未使用的程序头表条目"},
	{PT_LOAD,          "[PT_LOAD] Loadable program segment",            "可加载程序段"},
	{PT_DYNAMIC,       "[PT_DYNAMIC] Dynamic linking information",      "动态链接信息"},
	{PT_INTERP,        "[PT_INTERP] Program interpreter",               "程序解释器"},
	{PT_NOTE,          "[PT_NOTE] Auxiliary information",               "辅助信息"},
	{PT_SHLIB,         "[PT_SHLIB] Reserved",                           "保留"},
	{PT_PHDR,          "[PT_PHDR] Entry for header table itself",       "头表自身的入口"},           //？这是什么？
	{PT_TLS,           "[PT_TLS] Thread-local storage segment",         "线程局部存储(TLS) 存储段"}, //https://zh.wikipedia.org/wiki/线程局部存储
	{PT_NUM,           "[PT_NUM] Number of defined types",              "已定义类型数量"},
	{PT_LOOS,          "[PT_LOOS] Start of OS-specific",                "特定系统开始"},
	{PT_GNU_EH_FRAME,  "[PT_GNU_EH_FRAME] GCC .eh_frame_hdr segment",   ""},
	{PT_GNU_STACK,     "[PT_GNU_STACK] Indicates stack executability",  "表示堆栈的可执行性"},
	{PT_GNU_RELRO,     "[PT_GNU_RELRO] Read-only after relocation",     "重定位后只读"},
	{PT_LOSUNW,        "[PT_LOSUNW]",                                   ""},
	{PT_SUNWBSS,       "[PT_SUNWBSS] Sun Specific segment",             "Sun指定的段"},
	{PT_SUNWSTACK,     "[PT_SUNWSTACK] Stack segment",                  "栈段"},
	{PT_HISUNW,        "",                                              ""},
	{PT_HIOS,          "[PT_HIOS] End of OS-specific",                  "特定系统结束"},
	{PT_LOPROC,        "[PT_LOPROC] Start of processor-specific",       "特定处理器开始"},
	{PT_HIPROC,        "[PT_HIPROC] End of processor-specific",         "特定处理器结束"}
};

/* 节头表 */
// elf.h 431
struct V Elf32_Shdr_sh_type[36] = {
	{SHT_NULL,           "[SHT_NULL] Section header table entry unused",  "未使用的节"},
	{SHT_PROGBITS,       "[SHT_PROGBITS] Program data",                   "程序数据"},
	{SHT_SYMTAB,         "[SHT_SYMTAB] Symbol table",                     "符号表"},
	{SHT_STRTAB,         "[SHT_STRTAB] String table",                     "字符串表"},
	{SHT_RELA,           "[SHT_RELA] Relocation entries with addends",    "带加数的重定位条目"},
	{SHT_HASH,           "[SHT_HASH] Symbol hash table",                  "符号哈希表"},
	{SHT_DYNAMIC,        "[SHT_DYNAMIC] Dynamic linking information",     "动态链接信息"},
	{SHT_NOTE,           "[SHT_NOTE] Notes",                              ""},
	{SHT_NOBITS,         "[SHT_NOBITS] Program space with no data (bss)", "无数据的程序空间(bss)"},
	{SHT_REL,            "[SHT_REL] Relocation entries, no addends",      "不带加数的重定位条目"},   // 什么是 addends ?
	{SHT_SHLIB,          "[SHT_SHLIB] Reserved",                          "保留的"},
	{SHT_DYNSYM,         "[SHT_DYNSYM] Dynamic linker symbol table",      "动态链接符号表"},
	{SHT_INIT_ARRAY,     "[SHT_INIT_ARRAY] Array of constructors",        "构造函数数组"},
	{SHT_FINI_ARRAY,     "[SHT_FINI_ARRAY] Array of destructors",         "析构函数数组"},
	{SHT_PREINIT_ARRAY,  "[SHT_PREINIT_ARRAY] Array of pre-constructors", "预构造函数数据"},
	{SHT_GROUP,          "[SHT_GROUP] Section group",                     "节组"},
	{SHT_SYMTAB_SHNDX,   "[SHT_SYMTAB_SHNDX] Extended section indeces",   "已扩展节索引"},
	{SHT_NUM,            "[SHT_NUM] Number of defined types.",            "已定义类型数"},
	{SHT_LOOS,           "[SHT_LOOS] Start OS-specific",                  "特定系统开始"},
	{SHT_GNU_ATTRIBUTES, "[SHT_GNU_ATTRIBUTES] Object attributes",        "对象属性"},
	{SHT_GNU_HASH,       "[SHT_GNU_HASH] GNU-style hash table",           "GNU风格的哈希表"},
	{SHT_GNU_LIBLIST,    "[SHT_GNU_LIBLIST] Prelink library list",        "预链接库列表"},
	{SHT_CHECKSUM,       "[SHT_CHECKSUM] Checksum for DSO content",       "DSO校验和"},
	{SHT_LOSUNW,         "[SHT_LOSUNW] Sun-specific low bound",           "Sun特定下限"},
	{SHT_SUNW_move,      "[SHT_SUNW_move]",                               ""},
	{SHT_SUNW_COMDAT,    "[SHT_SUNW_COMDAT]",                             ""},
	{SHT_SUNW_syminfo,   "[SHT_SUNW_syminfo]",                            ""},
	{SHT_GNU_verdef,     "[SHT_GNU_verdef] Version definition section",   "版本定义节"},
	{SHT_GNU_verneed,    "[SHT_GNU_verneed] Version needs section",       "版本需求节"},
	{SHT_GNU_versym,     "[SHT_GNU_versym] Version symbol table",         "版本符号表"},
	{SHT_HISUNW,         "[SHT_HISUNW] Sun-specific high bound",          "Sun特定上限"},
	{SHT_HIOS,           "[SHT_HIOS] End OS-specific type",               "特定系统结束"},
	{SHT_LOPROC,         "[SHT_LOPROC] Start of processor-specific",      "特定处理器开始"},
	{SHT_HIPROC,         "[SHT_HIPROC] End of processor-specific",        "特定处理器结束"},
	{SHT_LOUSER,         "[SHT_LOUSER] Start of application-specific",    "特定程序开始"},
	{SHT_HIUSER,         "[SHT_HIUSER] End of application-specific",      "特定程序结束"}
};

// elf.h 470
struct V Elf32_Shdr_sh_flags[15] = {
	{SHF_WRITE,"[SHF_WRITE] Writable","可写"},
	{SHF_ALLOC,"[SHF_ALLOC] Occupies memory during execution","执行期间占用内存"},
	{SHF_EXECINSTR,"[SHF_EXECINSTR] Executable","可执行"},
	{SHF_MERGE,"[SHF_MERGE] Might be merged","可能被合并"},
	{SHF_STRINGS,"[SHF_STRINGS] Contains nul-terminated strings","包含以nul结尾的字符串"},
	{SHF_INFO_LINK,"[SHF_INFO_LINK] `sh_info' contains SHT index","`sh_info' 包含 SHT 索引"},
	{SHF_LINK_ORDER,"[SHF_LINK_ORDER] Preserve order after combining","合并后保持顺序"},
	{SHF_OS_NONCONFORMING,"[SHF_OS_NONCONFORMING] Non-standard OS specific handling required","需要非标准操作系统特定处理"},
	{SHF_GROUP,"[SHF_GROUP] Section is member of a group","此节是某个组的成员"},
	{SHF_TLS,"[SHF_TLS] Section hold thread-local data","此节内是 thread-local(TLS) 数据"},
	{SHF_COMPRESSED,"[SHF_COMPRESSED] Section with compressed data","带有压缩数据的节"},
	{SHF_MASKOS,"[SHF_MASKOS] OS-specific","系统指定"},
	{SHF_MASKPROC,"[SHF_MASKPROC] Processor-specific","处理器指定"},
	{SHF_ORDERED,"[SHF_ORDERED] Special ordering requirement (Solaris)",""},
	{SHF_EXCLUDE,"[SHF_EXCLUDE] Section is excluded unless referenced or allocated (Solaris).",""}
};

struct V defaultV = { 0,"Undefined or Reserved","未定义或保留,我也没找到定义！" };

int findV(V *vs,int size,int value,V **v)
{
	size = size / sizeof(V);
	for (int i = 0; i < size; i++)
	{
		if ((vs + i)->value == value) {
			*v = vs + i;
			return 0;
		}
	}
	*v = &defaultV;
	return -1;
}

